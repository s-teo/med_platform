from rest_framework_simplejwt.views import TokenObtainPairView
from rest_framework import generics, status
from rest_framework.permissions import AllowAny, IsAuthenticated
from .serializers import (
    UserRegisterSerializer,
    CustomTokenObtainPairSerializer,
    ProfileUpdateSerializer,
)
from .permissions import IsOwnerOrReadOnly
from rest_framework.views import APIView
from rest_framework.response import Response

from django.core.cache import cache
import random

from .models import User
from .utils.twilio import send_sms_code  # –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS


class UserRegisterView(generics.CreateAPIView):
    serializer_class = UserRegisterSerializer
    permission_classes = [AllowAny]


class ProfileUpdateView(generics.RetrieveUpdateAPIView):
    serializer_class = ProfileUpdateSerializer
    permission_classes = [IsAuthenticated, IsOwnerOrReadOnly]

    def get_object(self):
        return self.request.user


class CustomTokenObtainPairView(TokenObtainPairView):
    serializer_class = CustomTokenObtainPairSerializer


# üì± 1. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Twilio
class SendVerificationCodeView(APIView):
    permission_classes = [AllowAny]

    # def post(self, request):
    #     phone = request.data.get("phone")
    #     if not phone:
    #         return Response({"error": "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}, status=status.HTTP_400_BAD_REQUEST)
    #
    #     code = str(random.randint(1000, 9999))
    #     cache.set(f'verify_code_{phone}', code, timeout=300)  # –∫–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 5 –º–∏–Ω—É—Ç
    #
    #     try:
    #         send_sms_code(phone, code)
    #     except Exception as e:
    #         return Response({"error": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: {str(e)}"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    #
    #     return Response({"message": "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"})
    def post(self, request):
        phone = request.data.get("phone")
        if not phone:
            return Response({"error": "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}, status=status.HTTP_400_BAD_REQUEST)

        code = str(random.randint(1000, 9999))
        cache.set(f'verify_code_{phone}', code, timeout=300)  # 5 –º–∏–Ω—É—Ç

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ SMS API
        print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ {phone}: {code}")

        return Response({"message": "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"})

# ‚úÖ 2. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞
class VerifyPhoneCodeView(APIView):
    permission_classes = [AllowAny]

    def post(self, request):
        phone = request.data.get("phone")
        code = request.data.get("code")

        if not phone or not code:
            return Response({"error": "–¢–µ–ª–µ—Ñ–æ–Ω –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}, status=status.HTTP_400_BAD_REQUEST)

        real_code = cache.get(f'verify_code_{phone}')
        if real_code == code:
            try:
                user = User.objects.get(phone=phone)
                user.is_phone_verified = True
                user.save()
            except User.DoesNotExist:
                return Response({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=status.HTTP_404_NOT_FOUND)

            cache.delete(f'verify_code_{phone}')
            return Response({"message": "–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"})

        return Response({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥"}, status=status.HTTP_400_BAD_REQUEST)


